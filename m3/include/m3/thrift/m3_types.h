/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef m3_TYPES_H
#define m3_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace tally { namespace m3 { namespace thrift {

class CountValue;

class GaugeValue;

class TimerValue;

class MetricValue;

class MetricTag;

class Metric;

class MetricBatch;

typedef struct _CountValue__isset {
  _CountValue__isset() : i64Value(false) {}
  bool i64Value :1;
} _CountValue__isset;

class CountValue : public virtual ::apache::thrift::TBase {
 public:

  CountValue(const CountValue&);
  CountValue& operator=(const CountValue&);
  CountValue() : i64Value(0) {
  }

  virtual ~CountValue() throw();
  int64_t i64Value;

  _CountValue__isset __isset;

  void __set_i64Value(const int64_t val);

  bool operator == (const CountValue & rhs) const
  {
    if (__isset.i64Value != rhs.__isset.i64Value)
      return false;
    else if (__isset.i64Value && !(i64Value == rhs.i64Value))
      return false;
    return true;
  }
  bool operator != (const CountValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CountValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CountValue &a, CountValue &b);

std::ostream& operator<<(std::ostream& out, const CountValue& obj);

typedef struct _GaugeValue__isset {
  _GaugeValue__isset() : i64Value(false), dValue(false) {}
  bool i64Value :1;
  bool dValue :1;
} _GaugeValue__isset;

class GaugeValue : public virtual ::apache::thrift::TBase {
 public:

  GaugeValue(const GaugeValue&);
  GaugeValue& operator=(const GaugeValue&);
  GaugeValue() : i64Value(0), dValue(0) {
  }

  virtual ~GaugeValue() throw();
  int64_t i64Value;
  double dValue;

  _GaugeValue__isset __isset;

  void __set_i64Value(const int64_t val);

  void __set_dValue(const double val);

  bool operator == (const GaugeValue & rhs) const
  {
    if (__isset.i64Value != rhs.__isset.i64Value)
      return false;
    else if (__isset.i64Value && !(i64Value == rhs.i64Value))
      return false;
    if (__isset.dValue != rhs.__isset.dValue)
      return false;
    else if (__isset.dValue && !(dValue == rhs.dValue))
      return false;
    return true;
  }
  bool operator != (const GaugeValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GaugeValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GaugeValue &a, GaugeValue &b);

std::ostream& operator<<(std::ostream& out, const GaugeValue& obj);

typedef struct _TimerValue__isset {
  _TimerValue__isset() : i64Value(false), dValue(false) {}
  bool i64Value :1;
  bool dValue :1;
} _TimerValue__isset;

class TimerValue : public virtual ::apache::thrift::TBase {
 public:

  TimerValue(const TimerValue&);
  TimerValue& operator=(const TimerValue&);
  TimerValue() : i64Value(0), dValue(0) {
  }

  virtual ~TimerValue() throw();
  int64_t i64Value;
  double dValue;

  _TimerValue__isset __isset;

  void __set_i64Value(const int64_t val);

  void __set_dValue(const double val);

  bool operator == (const TimerValue & rhs) const
  {
    if (__isset.i64Value != rhs.__isset.i64Value)
      return false;
    else if (__isset.i64Value && !(i64Value == rhs.i64Value))
      return false;
    if (__isset.dValue != rhs.__isset.dValue)
      return false;
    else if (__isset.dValue && !(dValue == rhs.dValue))
      return false;
    return true;
  }
  bool operator != (const TimerValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TimerValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TimerValue &a, TimerValue &b);

std::ostream& operator<<(std::ostream& out, const TimerValue& obj);

typedef struct _MetricValue__isset {
  _MetricValue__isset() : count(false), gauge(false), timer(false) {}
  bool count :1;
  bool gauge :1;
  bool timer :1;
} _MetricValue__isset;

class MetricValue : public virtual ::apache::thrift::TBase {
 public:

  MetricValue(const MetricValue&);
  MetricValue& operator=(const MetricValue&);
  MetricValue() {
  }

  virtual ~MetricValue() throw();
  CountValue count;
  GaugeValue gauge;
  TimerValue timer;

  _MetricValue__isset __isset;

  void __set_count(const CountValue& val);

  void __set_gauge(const GaugeValue& val);

  void __set_timer(const TimerValue& val);

  bool operator == (const MetricValue & rhs) const
  {
    if (__isset.count != rhs.__isset.count)
      return false;
    else if (__isset.count && !(count == rhs.count))
      return false;
    if (__isset.gauge != rhs.__isset.gauge)
      return false;
    else if (__isset.gauge && !(gauge == rhs.gauge))
      return false;
    if (__isset.timer != rhs.__isset.timer)
      return false;
    else if (__isset.timer && !(timer == rhs.timer))
      return false;
    return true;
  }
  bool operator != (const MetricValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MetricValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MetricValue &a, MetricValue &b);

std::ostream& operator<<(std::ostream& out, const MetricValue& obj);

typedef struct _MetricTag__isset {
  _MetricTag__isset() : tagName(false), tagValue(false) {}
  bool tagName :1;
  bool tagValue :1;
} _MetricTag__isset;

class MetricTag : public virtual ::apache::thrift::TBase {
 public:

  MetricTag(const MetricTag&);
  MetricTag& operator=(const MetricTag&);
  MetricTag() : tagName(), tagValue() {
  }

  virtual ~MetricTag() throw();
  std::string tagName;
  std::string tagValue;

  _MetricTag__isset __isset;

  void __set_tagName(const std::string& val);

  void __set_tagValue(const std::string& val);

  bool operator == (const MetricTag & rhs) const
  {
    if (!(tagName == rhs.tagName))
      return false;
    if (__isset.tagValue != rhs.__isset.tagValue)
      return false;
    else if (__isset.tagValue && !(tagValue == rhs.tagValue))
      return false;
    return true;
  }
  bool operator != (const MetricTag &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MetricTag & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MetricTag &a, MetricTag &b);

std::ostream& operator<<(std::ostream& out, const MetricTag& obj);

typedef struct _Metric__isset {
  _Metric__isset() : name(false), metricValue(false), timestamp(false), tags(false) {}
  bool name :1;
  bool metricValue :1;
  bool timestamp :1;
  bool tags :1;
} _Metric__isset;

class Metric : public virtual ::apache::thrift::TBase {
 public:

  Metric(const Metric&);
  Metric& operator=(const Metric&);
  Metric() : name(), timestamp(0) {
  }

  virtual ~Metric() throw();
  std::string name;
  MetricValue metricValue;
  int64_t timestamp;
  std::set<MetricTag>  tags;

  _Metric__isset __isset;

  void __set_name(const std::string& val);

  void __set_metricValue(const MetricValue& val);

  void __set_timestamp(const int64_t val);

  void __set_tags(const std::set<MetricTag> & val);

  bool operator == (const Metric & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (__isset.metricValue != rhs.__isset.metricValue)
      return false;
    else if (__isset.metricValue && !(metricValue == rhs.metricValue))
      return false;
    if (__isset.timestamp != rhs.__isset.timestamp)
      return false;
    else if (__isset.timestamp && !(timestamp == rhs.timestamp))
      return false;
    if (__isset.tags != rhs.__isset.tags)
      return false;
    else if (__isset.tags && !(tags == rhs.tags))
      return false;
    return true;
  }
  bool operator != (const Metric &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Metric & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Metric &a, Metric &b);

std::ostream& operator<<(std::ostream& out, const Metric& obj);

typedef struct _MetricBatch__isset {
  _MetricBatch__isset() : metrics(false), commonTags(false) {}
  bool metrics :1;
  bool commonTags :1;
} _MetricBatch__isset;

class MetricBatch : public virtual ::apache::thrift::TBase {
 public:

  MetricBatch(const MetricBatch&);
  MetricBatch& operator=(const MetricBatch&);
  MetricBatch() {
  }

  virtual ~MetricBatch() throw();
  std::vector<Metric>  metrics;
  std::set<MetricTag>  commonTags;

  _MetricBatch__isset __isset;

  void __set_metrics(const std::vector<Metric> & val);

  void __set_commonTags(const std::set<MetricTag> & val);

  bool operator == (const MetricBatch & rhs) const
  {
    if (!(metrics == rhs.metrics))
      return false;
    if (__isset.commonTags != rhs.__isset.commonTags)
      return false;
    else if (__isset.commonTags && !(commonTags == rhs.commonTags))
      return false;
    return true;
  }
  bool operator != (const MetricBatch &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MetricBatch & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MetricBatch &a, MetricBatch &b);

std::ostream& operator<<(std::ostream& out, const MetricBatch& obj);

}}} // namespace

#endif

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef M3_H
#define M3_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "m3/thrift/m3_types.h"

namespace m3 { namespace thrift {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class M3If {
 public:
  virtual ~M3If() {}

  /**
   * Emits a batch of metrics.
   * 
   * @param batch
   */
  virtual void emitMetricBatch(const MetricBatch& batch) = 0;
};

class M3IfFactory {
 public:
  typedef M3If Handler;

  virtual ~M3IfFactory() {}

  virtual M3If* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(M3If* /* handler */) = 0;
};

class M3IfSingletonFactory : virtual public M3IfFactory {
 public:
  M3IfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<M3If>& iface) : iface_(iface) {}
  virtual ~M3IfSingletonFactory() {}

  virtual M3If* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(M3If* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<M3If> iface_;
};

class M3Null : virtual public M3If {
 public:
  virtual ~M3Null() {}
  void emitMetricBatch(const MetricBatch& /* batch */) {
    return;
  }
};

typedef struct _M3_emitMetricBatch_args__isset {
  _M3_emitMetricBatch_args__isset() : batch(false) {}
  bool batch :1;
} _M3_emitMetricBatch_args__isset;

class M3_emitMetricBatch_args {
 public:

  M3_emitMetricBatch_args(const M3_emitMetricBatch_args&);
  M3_emitMetricBatch_args& operator=(const M3_emitMetricBatch_args&);
  M3_emitMetricBatch_args() {
  }

  virtual ~M3_emitMetricBatch_args() throw();
  MetricBatch batch;

  _M3_emitMetricBatch_args__isset __isset;

  void __set_batch(const MetricBatch& val);

  bool operator == (const M3_emitMetricBatch_args & rhs) const
  {
    if (!(batch == rhs.batch))
      return false;
    return true;
  }
  bool operator != (const M3_emitMetricBatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const M3_emitMetricBatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class M3_emitMetricBatch_pargs {
 public:


  virtual ~M3_emitMetricBatch_pargs() throw();
  const MetricBatch* batch;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class M3Client : virtual public M3If {
 public:
  M3Client(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  M3Client(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void emitMetricBatch(const MetricBatch& batch);
  void send_emitMetricBatch(const MetricBatch& batch);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class M3Processor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<M3If> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (M3Processor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_emitMetricBatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  M3Processor(::apache::thrift::stdcxx::shared_ptr<M3If> iface) :
    iface_(iface) {
    processMap_["emitMetricBatch"] = &M3Processor::process_emitMetricBatch;
  }

  virtual ~M3Processor() {}
};

class M3ProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  M3ProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< M3IfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< M3IfFactory > handlerFactory_;
};

class M3Multiface : virtual public M3If {
 public:
  M3Multiface(std::vector<apache::thrift::stdcxx::shared_ptr<M3If> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~M3Multiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<M3If> > ifaces_;
  M3Multiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<M3If> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void emitMetricBatch(const MetricBatch& batch) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->emitMetricBatch(batch);
    }
    ifaces_[i]->emitMetricBatch(batch);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class M3ConcurrentClient : virtual public M3If {
 public:
  M3ConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  M3ConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void emitMetricBatch(const MetricBatch& batch);
  void send_emitMetricBatch(const MetricBatch& batch);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
